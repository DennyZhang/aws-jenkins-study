AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudFormation Sample Template: Jenkins is web software you can use to CI/CD. 
             This template installs Jenkins configured by Chef'
Parameters:
  StackName:
    Description: An environment name that will be prefixed to resource names
    Type: String
  VPC:
    Type: AWS::EC2::VPC::Id
    Description: Choose which VPC the Application Load Balancer should be deployed to
  Subnets:
    Description: Choose which subnets the Application Load Balancer should be deployed to
    Type: List<AWS::EC2::Subnet::Id>
  SecurityGroup:
    Description: Select the Security Group to apply to the Application Load Balancer
    Type: AWS::EC2::SecurityGroup::Id
  JenkinsPort:
    Default: 8080
    Description: The Jenkins Port
    Type: Number
    MinValue: 0
    MaxValue: 65535
    ConstraintDescription: TCP ports must be between 0 - 65535
  JenkinsLocation:
    Description: The IP address range that can be used to Access Jenkins URL
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

Resources:
  # Create VPC: https://sookocheff.com/post/aws/how-to-create-a-vpc-using-cloudformation/
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.31.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, "Fn::GetAZs": !Ref "AWS::Region"]
      VpcId: !Ref VPC
      CidrBlock: 172.31.0.0/20
      MapPublicIpOnLaunch: true
  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, "Fn::GetAZs": !Ref "AWS::Region"]
      VpcId: !Ref VPC
      CidrBlock: 172.31.16.0/20
      MapPublicIpOnLaunch: true
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  InternetRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable
  SubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetA
  SubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetB
  JenkinsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port Jenkins port locked down to the load balancer
        + SSH access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref JenkinsPort
          ToPort: !Ref JenkinsPort
          CidrIp: !Ref 'JenkinsLocation'
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref 'SSHLocation'
  # https://github.com/humank/20171116-cfn-lab/blob/master/infrastructure/load-balancers.yml
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name:
        "Fn::Sub":
          - "ALB-${StackName}"
          - StackName: !Ref AWS::StackName
      Subnets: !Ref Subnets
      SecurityGroups: 
        - !Ref SecurityGroup
      Tags: 
        - Key: Name
          Value: !Ref StackName

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP 
      DefaultActions: 
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name:
        "Fn::Sub":
          - "TG-${StackName}"
          - StackName: !Ref AWS::StackName
            VpcId: !Ref VPC
            Port: 80
            Protocol: HTTP
            HealthCheckPort: 80
            HealthCheckProtocol: HTTP
            HealthCheckPath: /index.php

Outputs:
  StackName:
    Value:
      !Ref AWS::StackName

  ALBLoadBalancer:
    Description: A reference to the Application Load Balancer
    Value: !Ref LoadBalancer
    Export:
      Name: 
        "Fn::Sub": 
          - ${StackName}-ALBLoadBalancer
          - StackName: !Ref AWS::StackName

  LoadBalancerUrl:
    Description: The URL of the ALB
    Value: !Sub
      - http://${alburl}
      - alburl: !GetAtt LoadBalancer.DNSName
    Export:
      Name: 
        "Fn::Sub": 
          - ${StackName}-LoadBalancerUrl
          - StackName: !Ref AWS::StackName

  LoadBalancerListener:
    Description: A reference to a port 80 listener
    Value: !Ref LoadBalancerListener  
    Export:
      Name: 
        "Fn::Sub": 
          - ${StackName}-LoadBalancerListener
          - StackName: !Ref AWS::StackName

  ALBTargetGroup:
    Description: A reference to ALB TargetGroup
    Value: !Ref ALBTargetGroup
    Export:
      Name:
        "Fn::Sub":
          - ${StackName}-ALBTargetGroup
          - StackName: !Ref AWS::StackName
